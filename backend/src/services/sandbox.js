import { SuperOpsClient } from './superops.js';

// Enhanced sandbox that can execute real SuperOps API calls for demo
export async function runInSandbox(codeBundle, inputs) {
  const { code } = codeBundle || {};
  const logs = ['Starting workflow execution...'];
  let output = { action: 'none' };
  
  try {
    // Parse the workflow type from inputs or code
    const ticket = inputs?.ticket || { id: 'T-' + Date.now(), priority: 'high' };
    const user = inputs?.user || null;
    
    const client = new SuperOpsClient();
    
    // Detect workflow type and execute appropriate actions
    if (code && code.includes('notify_manager') && ticket.priority === 'high') {
      logs.push('Detected high-priority ticket notification workflow');
      const result = await client.notifyManager(ticket.id, 'email', 
        `High priority ticket ${ticket.id} requires immediate attention`);
      
      output = {
        action: 'notify_manager',
        result: result,
        ticket_id: ticket.id
      };
      logs.push(`Notification sent: ${result.status}`);
      
    } else if (code && code.includes('create_user') && user) {
      logs.push('Detected user onboarding workflow');
      const result = await client.createUser({
        name: user.name || 'New User',
        email: user.email || 'user@company.com',
        role: user.role || 'employee',
        department: user.department || 'general'
      });
      
      output = {
        action: 'create_user',
        result: result,
        user: user
      };
      logs.push(`User creation: ${result.success ? 'success' : 'failed'}`);
      
    } else if (code && code.includes('create_ticket')) {
      logs.push('Detected ticket creation workflow');
      const result = await client.createTicket({
        title: inputs.title || 'Automated Ticket',
        description: inputs.description || 'Generated by automation workflow',
        priority: inputs.priority || 'medium',
        category: inputs.category || 'automation'
      });
      
      output = {
        action: 'create_ticket',
        result: result
      };
      logs.push(`Ticket creation: ${result.success ? 'success' : 'failed'}`);
      
    } else {
      logs.push('No matching workflow pattern found, running simulation');
      output = {
        action: 'simulated',
        result: { status: 'completed', message: 'Workflow simulated successfully' }
      };
    }
    
    logs.push('Workflow execution completed');
    
  } catch (error) {
    logs.push(`Error during execution: ${error.message}`);
    output = {
      action: 'error',
      result: { error: error.message }
    };
  }

  return {
    ok: true,
    logs,
    output,
    digest: String(code?.length || 0),
    timestamp: new Date().toISOString()
  };
}
